---
name: CI

'on':
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DISTRIBUTION: ubuntu
      RELEASE: jammy
    permissions:
      contents: write
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Install Packages with apt
        run: >2
          apt install -y
          bubblewrap
          cryptsetup-bin
          dosfstools
          e2fsprogs
          gdisk
          lvm2
          qemu-utils
          rsync
          zstd
        shell: sudo -E bash -e {0}
      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3'
          cache: 'pip'
        id: py3
      - name: Clean /usr/local/ to create more space
        run: rm -rf /usr/local
        shell: sudo -E bash -e {0}
      - name: Install Packages with Pip
        run: pip install -r requirements.txt
      - name: Set image variables
        run: |2
          printf -v IMAGE_ID '%s-%s-%s' "$DISTRIBUTION" "$RELEASE" "$RUNNER_ARCH"
          printf -v IMAGE_VERSION '%(%Y-%m-%d)T' "-1"
          printf -v IMAGE_NAME '%s_%s' "$IMAGE_ID" "$IMAGE_VERSION"
          printf -v IMAGE_SOURCE_DATE_EPOCH '%d' "$(git log -n 1 --pretty=format:%cd --date=format:"%s")"
          mapfile -t _VARIABLES < <(compgen -A variable)
          for _var in "${_VARIABLES[@]}"; do
            if [[ "$_var" =~ ^IMAGE_ ]]; then
              printf '%s=%s\n' "$_var" "${!_var}"
            fi
          done >> "$GITHUB_OUTPUT"
          printf 'PYTHONPATH=%s\n' "$(${{steps.py3.outputs.python-path}} -m site --user-site)" >> "$GITHUB_OUTPUT"
        id: variables
      - name: Cache/Restore mkosi.cache
        uses: actions/cache@v4
        with:
          path: mkosi.cache
          key: ${{ steps.variables.outputs.IMAGE_ID }}-mkosi.cache
      - name: Cache/Restore mkosi.output/${{ env.DISTRIBUTION }}-tools
        uses: actions/cache@v4
        with:
          path: mkosi.output/${{ env.DISTRIBUTION }}-tools
          key: ${{ steps.variables.outputs.IMAGE_ID }}-mkosi.output/${{ env.DISTRIBUTION }}-tools
      - name: Show build summary
        run: >2
          ${{steps.py3.outputs.python-path}} -m mkosi
          --image-version "${{ steps.variables.outputs.IMAGE_VERSION }}"
          --image-id "${{ steps.variables.outputs.IMAGE_ID }}"
          --source-date-epoch "${{ steps.variables.outputs.IMAGE_SOURCE_DATE_EPOCH }}"
          summary
        shell: sudo -E bash -e {0}
        env:
          PYTHONPATH: "${{ steps.variables.outputs.PYTHONPATH }}"
      - name: Build image
        run: >2
          ${{steps.py3.outputs.python-path}} -m mkosi
          --image-version "${{ steps.variables.outputs.IMAGE_VERSION }}"
          --image-id "${{ steps.variables.outputs.IMAGE_ID }}"
          --source-date-epoch "${{ steps.variables.outputs.IMAGE_SOURCE_DATE_EPOCH }}"
          --force
          build
        shell: sudo -E bash -e {0}
        env:
          PYTHONPATH: "${{ steps.variables.outputs.PYTHONPATH }}"
      - name: Convert Image
        run: ./create_disk_image.sh
        shell: sudo -E bash -e {0}
        env:
          IMAGE_ID: "${{ steps.variables.outputs.IMAGE_ID }}"
          IMAGE_VERSION: "${{ steps.variables.outputs.IMAGE_VERSION }}"
      - name: Remove mkosi.output/${{steps.variables.outputs.IMAGE_NAME}} to reclaim Disk Space
        run: rm -rf ${{steps.variables.outputs.IMAGE_NAME}}
        shell: sudo -E bash -e {0}
        working-directory: mkosi.output
      - name: Augment manifest
        run: >2
          ${{steps.py3.outputs.python-path}}
          augment_manifest.py
          "mkosi.output/${{steps.variables.outputs.IMAGE_NAME}}.manifest"
      - run: >2
          mv
          "${{steps.variables.outputs.IMAGE_NAME}}.manifest"
          "${{steps.variables.outputs.IMAGE_NAME}}.manifest.new"
        working-directory: mkosi.output
      - name: Get latest release manifest
        uses: robinraju/release-downloader@v1.9
        with:
          latest: true
          preRelease: false
          fileName: "*.manifest"
          tarBall: false
          zipBall: false
          out-file-path: mkosi.output
        id: last_release
      - run: ls -la mkosi.output/*
      - run: >2
          mv
          "${{ steps.variables.outputs.IMAGE_ID }}_${{ steps.last_release.outputs.release_name }}.manifest"
          "${{ steps.variables.outputs.IMAGE_ID }}_${{ steps.last_release.outputs.release_name }}.manifest.old"
        working-directory: mkosi.output
      - run: >2
          mv
          "${{steps.variables.outputs.IMAGE_NAME}}.manifest.new"
          "${{steps.variables.outputs.IMAGE_NAME}}.manifest"
        working-directory: mkosi.output
      - name: Compare releases
        id: do_releases_match
        run: >2
          ${{steps.py3.outputs.python-path}}
          compare_manifests.py
          "mkosi.output/${{ steps.variables.outputs.IMAGE_ID }}_${{ steps.last_release.outputs.release_name }}.manifest.old"
          "mkosi.output/${{steps.variables.outputs.IMAGE_NAME}}.manifest"
      - name: Split large files in â‰¤ 2 GiB chunks or they can't be uploaded to GitHub as a release
        if: steps.do_releases_match.outputs.value == 'false'
        run: |2
          for ending in raw.zst qcow2; do
            split --numeric-suffixes=1 --bytes="$((1024 * 1024 * 1024 * 1 ))" "${{steps.variables.outputs.IMAGE_NAME}}.${ending}" "${{steps.variables.outputs.IMAGE_NAME}}.${ending}.";
          done
        working-directory: mkosi.output
      - name: Compute checksums
        if: steps.do_releases_match.outputs.value == 'false'
        run: sha512sum "${{steps.variables.outputs.IMAGE_NAME}}.manifest" "${{steps.variables.outputs.IMAGE_NAME}}.qcow2"* "${{steps.variables.outputs.IMAGE_NAME}}.raw.zst"* > "${{steps.variables.outputs.IMAGE_NAME}}.sha512"
        working-directory: mkosi.output
      - name: Release ${{steps.variables.outputs.IMAGE_VERSION}}
        if: steps.do_releases_match.outputs.value == 'false'
        uses: softprops/action-gh-release@v0.1.15
        with:
          files: |2
            mkosi.output/${{steps.variables.outputs.IMAGE_NAME}}.sha512
            mkosi.output/${{steps.variables.outputs.IMAGE_NAME}}.manifest
            mkosi.output/${{steps.variables.outputs.IMAGE_NAME}}.qcow2.*
            mkosi.output/${{steps.variables.outputs.IMAGE_NAME}}.raw.zst.*
          tag_name: ${{steps.variables.outputs.IMAGE_VERSION}}
      - name: Make mkosi.cache cachable for GitHub
        run: setfacl -R -m "u:runner:rwx" mkosi.cache mkosi.output
        shell: sudo -E bash -e {0}
        if: always()
