---
name: CI

'on':
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  push:

jobs:
  build:
    strategy:
      matrix:
        include:
          - distribution: ubuntu
            release: jammy
    runs-on: ubuntu-latest
    env:
      DISTRIBUTION: ${{ matrix.distribution }}
      RELEASE: ${{ matrix.release }}
    permissions:
      contents: write
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Install Packages with apt
        run: >2
          apt install -y
          bubblewrap
          cryptsetup-bin
          dosfstools
          e2fsprogs
          gdisk
          lvm2
          qemu-utils
          rsync
          zstd
        shell: sudo -E bash -e {0}
      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3'
          cache: 'pip'
        id: py3
      - name: Clean /usr/local/ to create more space
        run: |2
          from pathlib import Path
          for child in Path('/usr/local').rglob('*'):
            try:
              child.unlink()
            except IsADirectoryError:
              pass
        shell: sudo -E python {0}
      - name: Install Packages with Pip
        run: pip install -r requirements.txt
      - name: Set image variables
        run: |2
          printf -v IMAGE_ID '%s-%s-%s' "${{ matrix.distribution }}" "${{ matrix.release }}" "$RUNNER_ARCH"
          printf -v IMAGE_VERSION '%(%Y-%m-%d)T' "-1"
          printf -v IMAGE_NAME '%s_%s' "$IMAGE_ID" "$IMAGE_VERSION"
          printf -v IMAGE_SOURCE_DATE_EPOCH '%d' "$(git log -n 1 --pretty=format:%cd --date=format:"%s")"
          mapfile -t _VARIABLES < <(compgen -A variable)
          for _var in "${_VARIABLES[@]}"; do
            if [[ "$_var" =~ ^IMAGE_ ]]; then
              printf '%s=%s\n' "$_var" "${!_var}"
            fi
          done >> "$GITHUB_OUTPUT"
          printf 'PYTHONPATH=%s\n' "$(${{ steps.py3.outputs.python-path }} -m site --user-site)" >> "$GITHUB_OUTPUT"
        id: variables
      - name: Cache/Restore mkosi.cache
        uses: actions/cache@v4
        with:
          path: mkosi.cache
          key: ${{ steps.variables.outputs.IMAGE_ID }}-mkosi.cache
      - name: Cache/Restore mkosi.output/${{ matrix.distribution }}-tools
        uses: actions/cache@v4
        with:
          path: mkosi.output/${{ matrix.distribution }}-tools
          key: ${{ steps.variables.outputs.IMAGE_ID }}-mkosi.output/${{ matrix.distribution }}-tools
      - name: Show build summary
        run: >2
          ${{ steps.py3.outputs.python-path }} -m mkosi
          --image-version "${{ steps.variables.outputs.IMAGE_VERSION }}"
          --image-id "${{ steps.variables.outputs.IMAGE_ID }}"
          --source-date-epoch "${{ steps.variables.outputs.IMAGE_SOURCE_DATE_EPOCH }}"
          summary
        shell: sudo -E bash -e {0}
        env:
          PYTHONPATH: "${{ steps.variables.outputs.PYTHONPATH }}"
      - name: Build image
        run: >2
          ${{ steps.py3.outputs.python-path }} -m mkosi
          --image-version "${{ steps.variables.outputs.IMAGE_VERSION }}"
          --image-id "${{ steps.variables.outputs.IMAGE_ID }}"
          --source-date-epoch "${{ steps.variables.outputs.IMAGE_SOURCE_DATE_EPOCH }}"
          --force
          build
        shell: sudo -E bash -e {0}
        env:
          PYTHONPATH: "${{ steps.variables.outputs.PYTHONPATH }}"
      - name: Convert Image
        run: ./create_disk_image.sh
        shell: sudo -E bash -e {0}
        env:
          IMAGE_ID: "${{ steps.variables.outputs.IMAGE_ID }}"
          IMAGE_VERSION: "${{ steps.variables.outputs.IMAGE_VERSION }}"
      - name: Remove mkosi.output/${{ steps.variables.outputs.IMAGE_NAME }} to reclaim Disk Space
        run: rm -rf ${{ steps.variables.outputs.IMAGE_NAME }}
        shell: sudo -E bash -e {0}
        working-directory: mkosi.output
      - name: Augment manifest
        run: >2
          ${{ steps.py3.outputs.python-path }}
          augment_manifest.py
          "mkosi.output/${{ steps.variables.outputs.IMAGE_NAME }}.manifest"
      - run: >2
          mv
          "${{ steps.variables.outputs.IMAGE_NAME }}.manifest"
          "${{ steps.variables.outputs.IMAGE_NAME }}.manifest.new"
        working-directory: mkosi.output
      - name: Get latest release manifest
        uses: robinraju/release-downloader@v1.9
        with:
          tag: latest-${{ steps.variables.outputs.IMAGE_ID }}
          latest: false
          preRelease: false
          fileName: "*.manifest"
          tarBall: false
          zipBall: false
          out-file-path: mkosi.output
        continue-on-error: true
        id: last_release
      - run: >2
          mv
          "${{ steps.last_release.outputs.release_name }}.manifest"
          "${{ steps.last_release.outputs.release_name }}.manifest.old"
        working-directory: mkosi.output
        if: steps.last_release.outcome == 'success'
      - run: >2
          mv
          "${{ steps.variables.outputs.IMAGE_NAME }}.manifest.new"
          "${{ steps.variables.outputs.IMAGE_NAME }}.manifest"
        working-directory: mkosi.output
      - name: Compare releases
        id: do_releases_match
        run: >2
          ${{steps.py3.outputs.python-path}}
          compare_manifests.py
          "mkosi.output/${{ steps.last_release.outputs.release_name }}.manifest.old"
          "mkosi.output/${{ steps.variables.outputs.IMAGE_NAME }}.manifest"
        if: steps.last_release.outcome == 'success'
      - name: Split large files in â‰¤ 2 GiB chunks or they can't be uploaded to GitHub as a release
        if: steps.do_releases_match.outputs.value == 'false' || steps.last_release.outcome != 'success'
        run: |2
          for ending in raw.zst qcow2; do
            split --numeric-suffixes=1 --bytes="$((1024 * 1024 * 1024 * 1 ))" "${{ steps.variables.outputs.IMAGE_NAME }}.${ending}" "${{ steps.variables.outputs.IMAGE_NAME }}.${ending}.";
          done
        working-directory: mkosi.output
      - name: Compute checksums
        if: steps.do_releases_match.outputs.value == 'false' || steps.last_release.outcome != 'success'
        run: sha512sum "${{ steps.variables.outputs.IMAGE_NAME }}.manifest" "${{ steps.variables.outputs.IMAGE_NAME }}.qcow2"* "${{ steps.variables.outputs.IMAGE_NAME }}.raw.zst"* > "${{ steps.variables.outputs.IMAGE_NAME }}.sha512"
        working-directory: mkosi.output
      - name: Clean previous release
        if: steps.do_releases_match.outputs.value == 'false' || steps.last_release.outcome != 'success'
        run: gh release delete latest-${{ steps.variables.outputs.IMAGE_ID }} --cleanup-tag --yes
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Release ${{ steps.variables.outputs.IMAGE_NAME }}
        if: steps.do_releases_match.outputs.value == 'false' || steps.last_release.outcome != 'success'
        uses: softprops/action-gh-release@v2
        with:
          files: |2
            mkosi.output/${{ steps.variables.outputs.IMAGE_NAME }}.sha512
            mkosi.output/${{ steps.variables.outputs.IMAGE_NAME }}.manifest
            mkosi.output/${{ steps.variables.outputs.IMAGE_NAME }}.qcow2.*
            mkosi.output/${{ steps.variables.outputs.IMAGE_NAME }}.raw.zst.*
          name: ${{ steps.variables.outputs.IMAGE_NAME }}
          tag_name: latest-${{ steps.variables.outputs.IMAGE_ID }}
      - name: Make mkosi.cache and mkosi.output cachable for GitHub
        run: setfacl -R -m "u:runner:rwx" mkosi.cache mkosi.output
        shell: sudo -E bash -e {0}
        if: always()
